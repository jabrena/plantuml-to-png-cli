@startuml Core_Class_Diagram
!theme plain
skinparam classAttributeIconSize 0
skinparam classFontStyle bold
skinparam packageStyle rectangle

' Package declaration
package "info.jab.core" {

    ' Main Application Class
    class MainApplication {
        - logger : Logger
        - inputFile : String
        - watchDirectory : String
        - fileValidator : PlantUMLFileValidator
        - fileService : PlantUMLFileService
        - watchService : PlantUMLWatchService
        --
        + MainApplication()
        + MainApplication(fileValidator, fileService, watchService)
        + call() : Integer
        + execute() : CliResult
        - handleSingleFileConversion(inputFile) : CliResult
        - handleWatchMode(parameter) : CliResult
        - printBanner() : void
        + main(args) : void
    }

    ' CLI Result Enum
    enum CliResult {
        OK(0)
        KO(1)
        --
        - exitCode : int
        --
        + getExitCode() : int
    }

    ' File Validator
    class PlantUMLFileValidator {
        - PLANTUML_EXTENSION : String
        --
        + validatePlantUMLFile(filePath) : Optional<Path>
        - isFilePathValid(filePath) : boolean
        - isFileExists(path) : boolean
        - isRegularFile(path) : boolean
        - isReadable(path) : boolean
        - hasPlantUMLExtension(path) : boolean
    }

    ' File Service
    class PlantUMLFileService {
        - logger : Logger
        - DEFAULT_PLANTUML_SERVER : String
        - httpClient : PlantUMLHttpClient
        --
        + PlantUMLFileService()
        + PlantUMLFileService(plantUmlServerUrl)
        + PlantUMLFileService(httpClient)
        + processFile(inputPath) : boolean
        + convertToPng(inputPath) : Optional<Path>
        - generateOutputPath(inputPath) : Path
        - isValidPlantUMLSyntax(plantUMLContent) : boolean
        - generatePngData(plantUMLContent) : Optional<byte[]>
    }

    ' HTTP Client
    class PlantUMLHttpClient {
        - logger : Logger
        - HTTP_TIMEOUT : Duration
        - serverUrl : String
        - httpClient : HttpClient
        --
        + PlantUMLHttpClient(serverUrl)
        + generatePngData(plantUMLContent) : Optional<byte[]>
        - processHttpResponse(response) : Optional<byte[]>
        - processPngData(pngData) : Optional<byte[]>
        - encodePlantUMLContent(plantUMLContent) : String
        - encodePlantUMLBase64(data) : String
        - buildPngUrl(encodedContent) : String
        - createHttpRequest(requestUrl) : HttpRequest
        + getServerUrl() : String
    }

    ' Watch Service
    class PlantUMLWatchService {
        - logger : Logger
        - DEFAULT_POLLING_INTERVAL_MS : long
        - PUML_EXTENSION : String
        - PNG_EXTENSION : String
        - plantUMLService : PlantUMLFileService
        - pollingIntervalMs : long
        --
        + PlantUMLWatchService(plantUMLService)
        + PlantUMLWatchService(plantUMLService, pollingIntervalMs)
        + startWatching(watchDirectory) : Integer
        - processPlantUMLFiles(directory) : void
        - shouldConvertFile(pumlFile) : ConversionDecision
        - requiresSynchronization(pumlFile, pngFile) : boolean
        - listPlantUMLFiles(directory) : List<Path>
        - getPngPath(pumlFile) : Path
        - isFileModifiedInLastSeconds(filePath) : boolean
        - convertToPng(inputPath) : void
    }

    ' Inner Classes/Records
    class ConversionDecision {
        + shouldConvert : boolean
        + reason : ConversionReason
        --
        + convert(reason) : ConversionDecision
        + skip() : ConversionDecision
        + getReason() : String
    }

    enum ConversionReason {
        NO_PNG_EXISTS("no .png exists")
        PUML_RECENTLY_MODIFIED("recently modified .puml file")
        SYNC_REQUIRED("both files recently modified")
        UP_TO_DATE("up to date")
        --
        - description : String
        --
        + getDescription() : String
    }
}

' External Dependencies (simplified)
class "picocli.CommandLine" as CommandLine
class "java.util.concurrent.Callable" as Callable
class "java.net.http.HttpClient" as HttpClient
class "java.nio.file.Path" as Path
class "org.slf4j.Logger" as Logger

' Relationships
MainApplication ||--|| PlantUMLFileValidator : composition
MainApplication ||--|| PlantUMLFileService : composition
MainApplication ||--|| PlantUMLWatchService : composition
MainApplication --> CliResult : returns
MainApplication ..|> Callable : implements

PlantUMLFileService ||--|| PlantUMLHttpClient : composition
PlantUMLFileService ..> Path : uses

PlantUMLWatchService ||--|| PlantUMLFileService : composition
PlantUMLWatchService +-- ConversionDecision : inner class
ConversionDecision ||--|| ConversionReason : composition

PlantUMLHttpClient ||--|| HttpClient : composition

' External dependencies
MainApplication ..> CommandLine : uses
PlantUMLFileValidator ..> Path : uses
PlantUMLWatchService ..> Path : uses

' Notes
note right of MainApplication : Main entry point for CLI\nImplements Callable for picocli\nCoordinates file processing operations

note right of PlantUMLFileService : Core business logic for\nPlantUML to PNG conversion\nDelegates HTTP operations to client

note right of PlantUMLWatchService : Polling-based file watcher\nAutomatic conversion of .puml files\nUses ConversionDecision pattern

note right of PlantUMLHttpClient : Handles PlantUML server communication\nCustom base64 encoding implementation\nHTTP timeout and error handling

@enduml
