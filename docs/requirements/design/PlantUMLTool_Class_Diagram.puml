@startuml PlantUMLTool_Class_Diagram
!theme plain
skinparam classAttributeIconSize 0
skinparam classFontStyle bold
skinparam packageStyle rectangle

title PlantUML to PNG CLI Tool - Class Diagram

' Package declarations
package "info.jab.core" {

    ' CLI Main Class
    class PlantUMLToPngCli {
        - inputFile : String
        - fileValidator : PlantUMLFileValidator
        - plantUMLService : PlantUMLService
        --
        + PlantUMLToPngCli()
        + PlantUMLToPngCli(fileValidator, plantUMLService)
        + call() : Integer
        - validateInputFile() : Optional<Path>
        - convertToPng(inputPath : Path) : Optional<Boolean>
        + main(args : String[]) : void
    }

    ' HTTP Client Class
    class PlantUMLHttpClient {
        - {static} HTTP_TIMEOUT : Duration
        - serverUrl : String
        - httpClient : HttpClient
        --
        + PlantUMLHttpClient(serverUrl : String)
        + generatePngData(plantUMLContent : String) : Optional<byte[]>
        - encodePlantUMLContent(plantUMLContent : String) : String
        - encodePlantUMLBase64(data : byte[]) : String
        - buildPngUrl(encodedContent : String) : String
        - createHttpRequest(requestUrl : String) : HttpRequest
        + getServerUrl() : String
    }

    ' Core Service Class
    class PlantUMLService {
        - {static} DEFAULT_PLANTUML_SERVER : String
        - httpClient : PlantUMLHttpClient
        --
        + PlantUMLService()
        + PlantUMLService(plantUmlServerUrl : String)
        ~ PlantUMLService(httpClient : PlantUMLHttpClient)
        + convertToPng(inputPath : Path) : Optional<Path>
        - isValidPlantUMLSyntax(plantUMLContent : String) : boolean
        ~ generatePngData(plantUMLContent : String) : Optional<byte[]>
        - createOutputPath(inputPath : Path) : Path
    }

    ' File Validator Class
    class PlantUMLFileValidator {
        - {static} PLANTUML_EXTENSION : String = ".puml"
        --
        + validatePlantUMLFile(filePath : String) : Optional<Path>
        - isFilePathValid(filePath : String) : boolean
        - isFileExists(path : Path) : boolean
        - isRegularFile(path : Path) : boolean
        - isReadable(path : Path) : boolean
        - hasPlantUMLExtension(path : Path) : boolean
    }
}

' External Dependencies (shown as interfaces for clarity)
package "External Dependencies" <<Cloud>> {
    interface "Callable<Integer>" as Callable
    interface "picocli.CommandLine" as PicoCLI
    interface "java.nio.file.Path" as Path
    interface "java.util.Optional" as Optional
    interface "java.net.http.HttpClient" as HttpClient
    interface "java.net.http.HttpRequest" as HttpRequest
    interface "java.net.http.HttpResponse" as HttpResponse
}

' Relationships
PlantUMLToPngCli ..|> Callable : implements
PlantUMLToPngCli --> PlantUMLFileValidator : uses
PlantUMLToPngCli --> PlantUMLService : uses
PlantUMLToPngCli ..> PicoCLI : depends on

PlantUMLService --> PlantUMLHttpClient : uses
PlantUMLService ..> Path : uses
PlantUMLService ..> Optional : returns

PlantUMLHttpClient ..> HttpClient : uses
PlantUMLHttpClient ..> HttpRequest : creates
PlantUMLHttpClient ..> HttpResponse : processes
PlantUMLHttpClient ..> Optional : returns

PlantUMLFileValidator ..> Path : validates
PlantUMLFileValidator ..> Optional : returns

' Annotations
PlantUMLToPngCli : @Command
PlantUMLToPngCli : @Option(names = {"-f", "--file"})

' Notes for important design patterns
note right of PlantUMLToPngCli : **Command Pattern**\nImplements Callable<Integer>\nfor PicoCLI framework integration

note bottom of PlantUMLService : **Service Layer**\nEncapsulates core business logic\nfor PlantUML to PNG conversion\nUses HTTP client for remote processing

note left of PlantUMLHttpClient : **HTTP Client**\nHandles PlantUML server communication\nCustom encoding for PlantUML format\nManages HTTP requests and responses

note left of PlantUMLFileValidator : **Validator Pattern**\nValidates file existence,\nreadability, and extension

note top of "External Dependencies" : **Key External Dependencies:**\n• PicoCLI for CLI framework\n• Java HTTP Client for server communication\n• Java NIO for file operations\n• Optional for null safety

@enduml
